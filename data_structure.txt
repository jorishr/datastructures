##############
DATASTRUCTURES
##############

Common data structures from every day life: 
- dictionary: a list of sorted words
- city maps: 2D map of geometric info
- cashbook in business: cash in/cash out table form

Datastructures are ways to organize and store information in a computer efficiently.

- mathematical/logical approach: abstract data type (ADT). Example: a list that can store a given number of elements of any type, and read/modify elements by position.

Study the logical, the operations that can be performed on it and the cost (in time / in space) of those operations.

- practical implementation in a programming language: arrays, linked-list, stacks, queues, graphs, etc.


LIST AS ABSTRACT DATATYPE

A dynamic list with a given size, with operations like insert, remove, count, modify, read and specific datatype.

These requirements can be implemented through and array:
- size: you declare a max size, when the array is full you copy the array into a new array with double the size. If list is empty, you set the variable to be -1 and the size will be n + 1. If you set the variable to 0, the size will be n.

- insert/remove at index position: remove element and shift remaining elements to the front or back. Each time you insert/remove an element you update the size variable.

The efficiency of these operations is O(1) at best and O(n) at worst. The best scenario is when you add/remove the last elements and leave other elements untouched. Worst scenario is adding/removing at the beginning which results in shifting all other array elements.

If the array is full and you want to add another element the cost of copying is O(n) as well.

- read: since there is an index order the efficiency is O(1) 

The cost in time for most other operations in an array is O(n) which is not efficient for a dynamic list. Also, an array is stored as one continuous data block in memory. 

An alternative solution better solution would be to use a LINKED LIST data structure as it can, in some cases, more efficiently insert or remove nodes from the list without reorganization of the entire data structure.

Drawbacks of linked-lists: 
- random access of data elements is not allowed. Nodes must be accessed sequentially starting from the first one. Therefore, search operation is slow on a linked list O(n).
- it uses more memory than arrays because of the storage used by the pointers stored for each node.


LISTS, SETS AND BAGS

Lists have a defined order and can allow duplicate values.
A set is unordered and does NOT allow duplicates. Values in a set have an index position and when adding a duplicate value, the original one gets overwritten.
A bag is an unordered collection of values that DOES allow for duplicates.

SQL, for example, is based on the bag algebra. Thus if you want a database to provide order or to remove duplicates that datasbase has to perform calculation as that 'bag' does not have order by default and allows duplicates.


LINEAR DATASTRUCTURES:
- lists
- hash tables
- stack
- queue

HIEARCHICAL DATASTRUCTURES
- trees
- heap