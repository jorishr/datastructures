####
TREE
####

A tree has a ROOT NODE with child nodes. Each child node can have muliple child nodes as well. A leaf a node in a tree that has no child node.

A BINARY TREE is a tree whereby each node can have only TWO child nodes, a left and right node. One or both could be null.

A BINARY SEARCH TREE is a tree with specific order. For example, each left child node is less than the root or parent node and less than the right node:

			10

	5				12		
	
3		6		11		25

To find a number less than 10, we automatically know we can discard all nodes on right side of the tree. This makes search efficient. To find 3 we discard all right nodes at root level, on the second level we know it is less than 5 so we can discard the right side again, and we end up at three.

On each step you we can discard half of the nodes untill we find what we are looking for.

INSERT works the same way as search. To insert 1 for example, we start at root level, it is smaller than 5, thus we discard the enitre right side of the tree. At the next level we discard the enitire side under node 6. Under three we add 1 as a left node. 4 on the other hand would stored at the right side unde the three node.

A tree can be BALANCED, that is with roughly the same number of nodes on the left and right side of the tree. An UNBALANCED tree will start looking like a list as one side has much more than the other. This depends upon the algorithm that is used.

TRAVERSING A TREE

Traversing the tree can be done in three ways using DEPTH FIRST SEARCH: inorder, preorder or postorder.

PREORDER: visit the root nodes first, than the left node, than the right nodes.

INORDER: visit left nodes first, than the root nodes, than the right nodes.

POSTORDER: visit the left nodes first, than the tight nodes, and lastly the root nodes.

In binary search trees, usually the INORDER methods is used:

	2
1		3

If you visit this tree with INORDER method, you get 1,2,3

BREADTH FIRST SEARCH can be done using the LEVEL ORDER. This explores all nodes on the each level before going on to the next level.




Note that a tree search is faster than the linear key-value lookup because you can discard half of the tree on each step, but a tree search is slower than a hash table.

BINARY SEARCH TREE IN JAVASCRIPT
 
See codepen.

How to make a tree automatically balanced? When adding values. When removing values. Searching a balanced tree is much more efficient than searching an unbalanced tree.